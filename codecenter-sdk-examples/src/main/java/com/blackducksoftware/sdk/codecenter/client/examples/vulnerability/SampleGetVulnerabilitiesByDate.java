/*
 * Black Duck Software Suite SDK
 * Copyright (C) 2016 Black Duck Software, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */
package com.blackducksoftware.sdk.codecenter.client.examples.vulnerability;

import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.kohsuke.args4j.Argument;
import org.kohsuke.args4j.CmdLineParser;
import org.kohsuke.args4j.Option;
import org.kohsuke.args4j.OptionDef;
import org.kohsuke.args4j.spi.Setter;

import com.blackducksoftware.sdk.codecenter.client.examples.SampleSearch;
import com.blackducksoftware.sdk.codecenter.client.examples.util.optionhandler.BDEnumOptionHandler;
import com.blackducksoftware.sdk.codecenter.client.examples.util.optionhandler.Date_yyyy_MM_dd_OptionHandler;
import com.blackducksoftware.sdk.codecenter.client.util.CodeCenterServerProxy;
import com.blackducksoftware.sdk.codecenter.vulnerability.data.VulnerabilityColumn;
import com.blackducksoftware.sdk.codecenter.vulnerability.data.VulnerabilityDateEnum;
import com.blackducksoftware.sdk.codecenter.vulnerability.data.VulnerabilityPageFilter;
import com.blackducksoftware.sdk.codecenter.vulnerability.data.VulnerabilitySummary;

public class SampleGetVulnerabilitiesByDate extends SampleSearch<VulnerabilitySummary> {

    public static void main(String[] args) {
        new SampleGetVulnerabilitiesByDate(args).run();
    }

    private static final DateFormat DATE_FORMAT = Date_yyyy_MM_dd_OptionHandler.DATE_FORMAT;

    @Argument(index = 3, required = true, metaVar = "fromDate", handler = Date_yyyy_MM_dd_OptionHandler.class,
            usage = "the starting cutoff date (inclusive) to filter results by")
    protected Date fromDate;

    @Argument(index = 4, required = false, metaVar = "toDate", handler = Date_yyyy_MM_dd_OptionHandler.class,
            usage = "the ending cutoff date (inclusive) to filter results by (default: today)")
    protected Date toDate;

    @Option(name = "-f", aliases = { "--filter-by" }, handler = VulnerabilityDateEnumOptionHandler.class, usage = "filter by this date property")
    protected VulnerabilityDateEnum sortField = VulnerabilityDateEnum.PUBLISHED;

    @Option(name = "-s", aliases = { "--sort-by" }, handler = VulnerabilityColumnOptionHandler.class,
            usage = "sort by this property (ascending if name, descending otherwise)")
    protected VulnerabilityColumn sortColumn = VulnerabilityColumn.VULNERABILITY_PUBLISHED;

    @Option(name = "-r", aliases = { "--reverse" }, usage = "reverse sort order")
    protected boolean reverse = false;

    public SampleGetVulnerabilitiesByDate(String[] args) {
        super(args);
    }

    @Override
    protected List<VulnerabilitySummary> search(CodeCenterServerProxy proxy) throws Exception {
        // Create the vulnerability page filter
        VulnerabilityPageFilter pageFilter = new VulnerabilityPageFilter();
        pageFilter.setFirstRowIndex(0);
        pageFilter.setLastRowIndex(limit - 1);
        pageFilter.setSortedColumn(sortColumn);
        pageFilter.setSortAscending((sortColumn == VulnerabilityColumn.VULNERABILITY_NAME) ^ reverse);

        // Handle unspecified input dates
        if (toDate == null) {
            toDate = Calendar.getInstance().getTime();
        }

        // Get the vulnerabilities
        return proxy.getVulnerabilityApi().getVulnerabilitiesByDate(fromDate, toDate, sortField, false, pageFilter);
    }

    @Override
    protected String getSearchExpression() {
        return "vulnerabilities from " + DATE_FORMAT.format(fromDate) + " through " + DATE_FORMAT.format(toDate);
    }

    @Override
    public void print(VulnerabilitySummary vuln, CodeCenterServerProxy proxy) {
        // Print vulnerability details
        print("Name", vuln.getName().getName());
        print("Published", vuln.getPublished());
        print("Created", vuln.getCreated());
        print("Modified", vuln.getModified());
        if (!vuln.getCreated().equals(vuln.getUpdated())) {
            print("Updated", vuln.getUpdated());
        }
        print("Description", vuln.getDescription());
        print("Severity", vuln.getSeverity());
        print("Base score", vuln.getBasescore());
        print("Impact score", vuln.getImpactscore());
        print("Exploitability score", vuln.getExploitabilityscore());
        System.out.println();
    }

    public static class VulnerabilityDateEnumOptionHandler extends BDEnumOptionHandler<VulnerabilityDateEnum> {

        public VulnerabilityDateEnumOptionHandler(CmdLineParser parser, OptionDef option, Setter<? super VulnerabilityDateEnum> setter) {
            super(parser, option, setter, VulnerabilityDateEnum.class);
        }

    }

    public static class VulnerabilityColumnOptionHandler extends BDEnumOptionHandler<VulnerabilityColumn> {

        public static String enumToString(VulnerabilityColumn value) {
            return enumNameToString(value.name().substring("VULNERABILITY_".length()));
        }

        public VulnerabilityColumnOptionHandler(CmdLineParser parser, OptionDef option, Setter<? super VulnerabilityColumn> setter) {
            super(parser, option, setter, VulnerabilityColumn.class);
        }

        @Override
        protected String toString(VulnerabilityColumn value) {
            return enumToString(value);
        }

    }

}
